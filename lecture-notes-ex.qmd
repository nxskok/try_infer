
try my lecture examples with infer

```{r}
library(tidyverse)
library(smmr)
library(infer)
```

blue jays attendances (one-sample t)

```{r}
my_url <- "http://ritsokiguess.site/datafiles/jays15-home.csv"
jays <- read_csv(my_url) 
jays
```

standard

```{r}
t.test(jays$attendance)
t.test(jays$attendance, mu=29327)
```

infer using theoretical dist

test

```{r}
jays %>% 
  specify(response = attendance) %>% 
  hypothesize(null = "point", mu = 29327) %>% 
  calculate(stat = "t") %>% 
  get_p_value("greater")
```

that seems to nullify this approach

This is how it has to go:

```{r}
jays %>% 
  specify(response = attendance) %>% 
  hypothesize(null = "point", mu = 29327) %>% 
  calculate(stat = "t") -> t_stat
t_stat
```

and then

```{r}
jays %>% 
  specify(response = attendance) %>% 
  assume(distribution = "t") -> t_dist
t_dist
```

and then

```{r}
get_p_value(t_dist, obs_t, "both")
```

that is to say, separating out the calculation of the test statistic, the null distribution, and then the P-value which depends on both of those.

Confidence interval for mean?

```{r}
jays %>% 
  specify(response = attendance) %>% 
  calculate(stat = "mean") -> obs_mean
obs_mean

```

```{r}
get_confidence_interval(t_dist, level = 0.95, point_estimate = obs_mean)
```


Infer is actually for simulation based inference. How would that go here?

```{r}
set.seed(457299)
```

think about a CI first (this is a percentile interval)

```{r}
jays %>% 
  specify(response = attendance) -> jays_att
jays_att
jays_att %>% 
  calculate(stat = "mean") -> sample_mean
jays_att %>%   
  generate(reps = 1000, type = "bootstrap") %>% 
  calculate(stat = "mean") %>% 
  get_confidence_interval(point_estimate = sample_mean, 
                          level = 0.95)
  
```

test

```{r}
jays_att %>% 
  hypothesize(null = "point", mu = 29327) %>% 
  generate(reps = 10000, type = "bootstrap") %>% 
  calculate(stat = "mean") -> sim 
sim %>% 
  visualize()  + shade_p_value(obs_stat = sample_mean, 
                               direction = "both")
sim %>% 
  get_p_value(obs_stat = sample_mean, direction = "both")
```

